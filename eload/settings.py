"""
Django settings for eload project.

Generated by 'django-admin startproject' using Django 2.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
# Disable lint errors for this file
# flake8: noqa

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@21qd)&g%d)^!*0)31f%l89uu8g_lkp$pd*@6^4#r63i-0@0o8'

# SECURITY WARNING: don't run with debug turned on in production!
try:
    DEBUG = eval(os.getenv('DJANGO_DEBUG'))
except Exception:
    DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']
if os.getenv('DJANGO_HOST'):
    ALLOWED_HOSTS.append(os.getenv('DJANGO_HOST'))


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'django_celery_beat',

    'cphapp.apps.CphappConfig',
    'profiles.apps.ProfilesConfig',
    'fcm.apps.FcmConfig',
    'webpack_loader',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'eload.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'static'),
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'eload.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'mydb',
        'USER': 'bdomingo',
        'PASSWORD': '1234',
        'HOST': 'localhost',
        'PORT': '',
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Manila'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, 'assets'),
    os.path.join(BASE_DIR, 'frontend', 'dist')
]

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'simple': {
            'format': '%(name)s - %(levelname)s - %(message)s',
            'style': '%'
        },
        'verbose': {
            'format': ('%(asctime)s: %(levelname)s - %(processName)s/%(threadName)s/%(name)s - %(message)s'),
            'style': '%'
        },
        'celery.formatter': {
            '()': 'celery.app.log.TaskFormatter',
            'format': '%(asctime)s: %(levelname)s/%(processName)s - %(message)s'
        }
    },

    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'level': 'DEBUG'
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'systemlogs.log'),
            'formatter': 'verbose',
            'level': 'WARNING'
        },
        'celery.console': {
            'class': 'logging.StreamHandler',
            'formatter': 'celery.formatter',
            'level': 'DEBUG'
        }
    },

    'loggers': {
        '': {
            'handlers': ['console', 'file'],
            'level': 'INFO'
        },
        'celery': {
            'handlers': ['celery.console', 'file'],
            'level': 'INFO'
        }
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    # 'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'PAGE_SIZE': 100,
}

WEBPACK_LOADER = {
    'DEFAULT': {
        'CACHE': not DEBUG,
        'BUNDLE_DIR_NAME': 'dist/',
        'STATS_FILE': os.path.join(BASE_DIR, 'frontend', 'webpack-stats.json'),
    }
}

# CELERY STUFF
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Manila'
CELERY_IMPORTS = ['cphapp.tasks']
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_WORKER_HIJACK_ROOT_LOGGER = False

try:
    from authentication.auth_settings import *
    INSTALLED_APPS += AUTH_INSTALLED_APPS
    REST_FRAMEWORK.update(AUTH_REST_FRAMEWORK)
except ImportError:
    pass

LOADNINJA_REWARD_TH = {
    'limit': 2e3, 'reward_factor': 0.1, 'reward_factor_onwards': 0.05}

# Try to import api keys if present
try:
    from eload.api_keys import *
except ImportError:
    pass

# import production settings
if not DEBUG:
    try:
        from eload.deployment_settings import *
    except ImportError:
        pass
